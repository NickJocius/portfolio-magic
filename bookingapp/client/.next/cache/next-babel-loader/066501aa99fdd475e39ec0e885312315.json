{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\n/**\r\n * create a component that will keep track of user's auth state\r\n * then wrap _app.js so that entire app knows if the user is logged in or not\r\n */\nimport React, { useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { Context } from \"../context\";\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    return firebase.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var _yield$user$getIdToke, token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user) {\n                  _context.next = 4;\n                  break;\n                }\n\n                dispatch({\n                  type: \"LOGOUT\"\n                });\n                _context.next = 10;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return user.getIdTokenResult();\n\n              case 6:\n                _yield$user$getIdToke = _context.sent;\n                token = _yield$user$getIdToke.token;\n                console.log(\"TOKEN\", token); // send this token to backend\n                // backend will check if thie token is valid (using firebase admin tool)\n                // if it is verified, you get the same user information in the backend too\n                // then you can decide to either save this user in your database or update the existing user\n                // then send the user information back to client\n\n                dispatch({\n                  type: \"LOGIN\",\n                  payload: user\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(FirebaseAuthState, \"o3sFqHzzIboOoOF6b2FSmERiAhY=\");\n\n_c = FirebaseAuthState;\nexport default FirebaseAuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthState\");","map":{"version":3,"sources":["C:/Users/NicholasJocius/Documents/GitHub/portfolio-magic/bookingapp/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","getIdTokenResult","token","console","log","payload"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBACnBJ,UAAU,CAACE,OAAD,CADS;AAAA,MAChCG,QADgC,eAChCA,QADgC;;AAGxCN,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAOE,QAAQ,CAACK,IAAT,GAAgBC,gBAAhB;AAAA,2EAAiC,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC/BA,IAD+B;AAAA;AAAA;AAAA;;AAEhCH,gBAAAA,QAAQ,CAAC;AACLI,kBAAAA,IAAI,EAAE;AADD,iBAAD,CAAR;AAFgC;AAAA;;AAAA;AAAA;AAAA,uBAMRD,IAAI,CAACE,gBAAL,EANQ;;AAAA;AAAA;AAMxBC,gBAAAA,KANwB,yBAMxBA,KANwB;AAOhCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,EAPgC,CAQhC;AACA;AACA;AACA;AACA;;AACAN,gBAAAA,QAAQ,CAAC;AACLI,kBAAAA,IAAI,EAAE,OADD;AAELK,kBAAAA,OAAO,EAAEN;AAFJ,iBAAD,CAAR;;AAbgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA,QAAP;AAmBH,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBAAO;AAAA,cAAGJ;AAAH,mBAAP;AACH,CA1BD;;GAAMD,iB;;KAAAA,iB;AA4BN,eAAeA,iBAAf","sourcesContent":["/**\r\n * create a component that will keep track of user's auth state\r\n * then wrap _app.js so that entire app knows if the user is logged in or not\r\n */\r\n\r\nimport React, { useEffect, useContext } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport { Context } from \"../context\";\r\n\r\nconst FirebaseAuthState = ({ children }) => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n    useEffect(() => {\r\n        return firebase.auth().onIdTokenChanged(async (user) => {\r\n            if (!user) {\r\n                dispatch({\r\n                    type: \"LOGOUT\",\r\n                });\r\n            } else {\r\n                const { token } = await user.getIdTokenResult();\r\n                console.log(\"TOKEN\", token);\r\n                // send this token to backend\r\n                // backend will check if thie token is valid (using firebase admin tool)\r\n                // if it is verified, you get the same user information in the backend too\r\n                // then you can decide to either save this user in your database or update the existing user\r\n                // then send the user information back to client\r\n                dispatch({\r\n                    type: \"LOGIN\",\r\n                    payload: user,\r\n                });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default FirebaseAuthState;\r\n"]},"metadata":{},"sourceType":"module"}