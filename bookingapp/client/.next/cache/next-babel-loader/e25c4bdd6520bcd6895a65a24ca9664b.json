{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\r\n * create a component that will keep track of user's auth state\r\n * then wrap _app.js so that entire app knows if the user is logged in or not\r\n */\nimport React, { useEffect, useContext } from \"react\";\nimport firebase from \"../firebase\";\nimport { Context } from \"../context\";\n\nconst FirebaseAuthState = ({\n  children\n}) => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEffect(() => {\n    return firebase.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        dispatch({\n          type: \"LOGOUT\"\n        });\n      } else {\n        const {\n          token\n        } = await user.getIdTokenResult();\n        console.log(\"TOKEN\", token); // send this token to backend\n        // backend will check if thie token is valid (using firebase admin tool)\n        // if it is verified, you get the same user information in the backend too\n        // then you can decide to either save this user in your database or update the existing user\n        // then send the user information back to client\n\n        dispatch({\n          type: \"LOGIN\",\n          payload: user\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\nexport default FirebaseAuthState;","map":{"version":3,"sources":["C:/Users/NicholasJocius/Documents/GitHub/portfolio-magic/bookingapp/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","token","getIdTokenResult","console","log","payload"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAeL,UAAU,CAACE,OAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAOE,QAAQ,CAACK,IAAT,GAAgBC,gBAAhB,CAAiC,MAAOC,IAAP,IAAgB;AACpD,UAAI,CAACA,IAAL,EAAW;AACPH,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAE;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACH,cAAM;AAAEC,UAAAA;AAAF,YAAY,MAAMF,IAAI,CAACG,gBAAL,EAAxB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB,EAFG,CAGH;AACA;AACA;AACA;AACA;;AACAL,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAE,OADD;AAELK,UAAAA,OAAO,EAAEN;AAFJ,SAAD,CAAR;AAIH;AACJ,KAlBM,CAAP;AAmBH,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBAAO;AAAA,cAAGJ;AAAH,mBAAP;AACH,CA1BD;;AA4BA,eAAeD,iBAAf","sourcesContent":["/**\r\n * create a component that will keep track of user's auth state\r\n * then wrap _app.js so that entire app knows if the user is logged in or not\r\n */\r\n\r\nimport React, { useEffect, useContext } from \"react\";\r\nimport firebase from \"../firebase\";\r\nimport { Context } from \"../context\";\r\n\r\nconst FirebaseAuthState = ({ children }) => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n    useEffect(() => {\r\n        return firebase.auth().onIdTokenChanged(async (user) => {\r\n            if (!user) {\r\n                dispatch({\r\n                    type: \"LOGOUT\",\r\n                });\r\n            } else {\r\n                const { token } = await user.getIdTokenResult();\r\n                console.log(\"TOKEN\", token);\r\n                // send this token to backend\r\n                // backend will check if thie token is valid (using firebase admin tool)\r\n                // if it is verified, you get the same user information in the backend too\r\n                // then you can decide to either save this user in your database or update the existing user\r\n                // then send the user information back to client\r\n                dispatch({\r\n                    type: \"LOGIN\",\r\n                    payload: user,\r\n                });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default FirebaseAuthState;\r\n"]},"metadata":{},"sourceType":"module"}